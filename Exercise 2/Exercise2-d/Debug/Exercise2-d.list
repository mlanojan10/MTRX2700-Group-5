
Exercise2-d.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000028c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  0000202c  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  0000202c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000420  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000424  08000424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08000428  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000202c  2**0
                  CONTENTS
 10 .bss          0000001c  2000002c  2000002c  0000202c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  0000202c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000186  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  000021e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  0000226a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000022bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000022f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000099  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000023d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000023f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000408 	.word	0x08000408

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000408 	.word	0x08000408

080001d4 <enable_peripheral_clocks>:
#include "definitions.s"


@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4860      	ldr	r0, [pc, #384]	@ (8000358 <done+0xa>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return from function call
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:



@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	485e      	ldr	r0, [pc, #376]	@ (800035c <done+0xe>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <main>:


.text

main:
    BL enable_peripheral_clocks
 80001ea:	f7ff fff3 	bl	80001d4 <enable_peripheral_clocks>
    BL initialise_discovery_board
 80001ee:	f7ff fff7 	bl	80001e0 <initialise_discovery_board>

    LDR R1, =ascii_string    @ Load the address of the input string
 80001f2:	495b      	ldr	r1, [pc, #364]	@ (8000360 <done+0x12>)
    MOV R4, #0               @ Initialize vowel count
 80001f4:	f04f 0400 	mov.w	r4, #0
    MOV R5, #0               @ Initialize consonant count
 80001f8:	f04f 0500 	mov.w	r5, #0

080001fc <count_loop>:

count_loop:
    LDRB R2, [R1], #1        @ Load a byte from the string into R2 and increment address
 80001fc:	f811 2b01 	ldrb.w	r2, [r1], #1
    CMP R2, #0               @ Check for null terminator
 8000200:	2a00      	cmp	r2, #0
    BEQ display_result       @ If null terminator, stop
 8000202:	f000 8083 	beq.w	800030c <display_result>

    BL check_vowel           @ Check if it's a vowel
 8000206:	f000 f80d 	bl	8000224 <check_vowel>
    CMP R3, #1               @ If R3 = 1, it's a vowel
 800020a:	2b01      	cmp	r3, #1
    BEQ increment_vowel
 800020c:	d004      	beq.n	8000218 <increment_vowel>

    BL check_consonant       @ Check if it's a consonant
 800020e:	f000 f823 	bl	8000258 <check_consonant>
    CMP R3, #1               @ If R3 = 1, it's a consonant
 8000212:	2b01      	cmp	r3, #1
    BEQ increment_consonant
 8000214:	d003      	beq.n	800021e <increment_consonant>

    B count_loop
 8000216:	e7f1      	b.n	80001fc <count_loop>

08000218 <increment_vowel>:

increment_vowel:
    ADD R4, R4, #1           @ Increment vowel count directly in R4
 8000218:	f104 0401 	add.w	r4, r4, #1
    B count_loop
 800021c:	e7ee      	b.n	80001fc <count_loop>

0800021e <increment_consonant>:

increment_consonant:
    ADD R5, R5, #1           @ Increment consonant count directly in R5
 800021e:	f105 0501 	add.w	r5, r5, #1
    B count_loop
 8000222:	e7eb      	b.n	80001fc <count_loop>

08000224 <check_vowel>:

@ -------------------------------------------
@ CHECK IF VOWEL
@ -------------------------------------------
check_vowel:
    MOV R3, #0              @ Assume not a vowel
 8000224:	f04f 0300 	mov.w	r3, #0

    CMP R2, #'a'
 8000228:	2a61      	cmp	r2, #97	@ 0x61
    BEQ is_vowel
 800022a:	d012      	beq.n	8000252 <is_vowel>
    CMP R2, #'e'
 800022c:	2a65      	cmp	r2, #101	@ 0x65
    BEQ is_vowel
 800022e:	d010      	beq.n	8000252 <is_vowel>
    CMP R2, #'i'
 8000230:	2a69      	cmp	r2, #105	@ 0x69
    BEQ is_vowel
 8000232:	d00e      	beq.n	8000252 <is_vowel>
    CMP R2, #'o'
 8000234:	2a6f      	cmp	r2, #111	@ 0x6f
    BEQ is_vowel
 8000236:	d00c      	beq.n	8000252 <is_vowel>
    CMP R2, #'u'
 8000238:	2a75      	cmp	r2, #117	@ 0x75
    BEQ is_vowel
 800023a:	d00a      	beq.n	8000252 <is_vowel>

    CMP R2, #'A'
 800023c:	2a41      	cmp	r2, #65	@ 0x41
    BEQ is_vowel
 800023e:	d008      	beq.n	8000252 <is_vowel>
    CMP R2, #'E'
 8000240:	2a45      	cmp	r2, #69	@ 0x45
    BEQ is_vowel
 8000242:	d006      	beq.n	8000252 <is_vowel>
    CMP R2, #'I'
 8000244:	2a49      	cmp	r2, #73	@ 0x49
    BEQ is_vowel
 8000246:	d004      	beq.n	8000252 <is_vowel>
    CMP R2, #'O'
 8000248:	2a4f      	cmp	r2, #79	@ 0x4f
    BEQ is_vowel
 800024a:	d002      	beq.n	8000252 <is_vowel>
    CMP R2, #'U'
 800024c:	2a55      	cmp	r2, #85	@ 0x55
    BEQ is_vowel
 800024e:	d000      	beq.n	8000252 <is_vowel>

    BX LR
 8000250:	4770      	bx	lr

08000252 <is_vowel>:

is_vowel:
    MOV R3, #1              @ Set R3 to 1 if it's a vowel
 8000252:	f04f 0301 	mov.w	r3, #1
    BX LR
 8000256:	4770      	bx	lr

08000258 <check_consonant>:

@ -------------------------------------------
@ CHECK IF CONSONANT
@ -------------------------------------------
check_consonant:
    MOV R3, #0              @ Assume not a consonant
 8000258:	f04f 0300 	mov.w	r3, #0

    CMP R2, #'b'
 800025c:	2a62      	cmp	r2, #98	@ 0x62
    BEQ is_consonant
 800025e:	d052      	beq.n	8000306 <is_consonant>
    CMP R2, #'c'
 8000260:	2a63      	cmp	r2, #99	@ 0x63
    BEQ is_consonant
 8000262:	d050      	beq.n	8000306 <is_consonant>
    CMP R2, #'d'
 8000264:	2a64      	cmp	r2, #100	@ 0x64
    BEQ is_consonant
 8000266:	d04e      	beq.n	8000306 <is_consonant>
    CMP R2, #'f'
 8000268:	2a66      	cmp	r2, #102	@ 0x66
    BEQ is_consonant
 800026a:	d04c      	beq.n	8000306 <is_consonant>
    CMP R2, #'g'
 800026c:	2a67      	cmp	r2, #103	@ 0x67
    BEQ is_consonant
 800026e:	d04a      	beq.n	8000306 <is_consonant>
    CMP R2, #'h'
 8000270:	2a68      	cmp	r2, #104	@ 0x68
    BEQ is_consonant
 8000272:	d048      	beq.n	8000306 <is_consonant>
    CMP R2, #'j'
 8000274:	2a6a      	cmp	r2, #106	@ 0x6a
    BEQ is_consonant
 8000276:	d046      	beq.n	8000306 <is_consonant>
    CMP R2, #'k'
 8000278:	2a6b      	cmp	r2, #107	@ 0x6b
    BEQ is_consonant
 800027a:	d044      	beq.n	8000306 <is_consonant>
    CMP R2, #'l'
 800027c:	2a6c      	cmp	r2, #108	@ 0x6c
    BEQ is_consonant
 800027e:	d042      	beq.n	8000306 <is_consonant>
    CMP R2, #'m'
 8000280:	2a6d      	cmp	r2, #109	@ 0x6d
    BEQ is_consonant
 8000282:	d040      	beq.n	8000306 <is_consonant>
    CMP R2, #'n'
 8000284:	2a6e      	cmp	r2, #110	@ 0x6e
    BEQ is_consonant
 8000286:	d03e      	beq.n	8000306 <is_consonant>
    CMP R2, #'p'
 8000288:	2a70      	cmp	r2, #112	@ 0x70
    BEQ is_consonant
 800028a:	d03c      	beq.n	8000306 <is_consonant>
    CMP R2, #'q'
 800028c:	2a71      	cmp	r2, #113	@ 0x71
    BEQ is_consonant
 800028e:	d03a      	beq.n	8000306 <is_consonant>
    CMP R2, #'r'
 8000290:	2a72      	cmp	r2, #114	@ 0x72
    BEQ is_consonant
 8000292:	d038      	beq.n	8000306 <is_consonant>
    CMP R2, #'s'
 8000294:	2a73      	cmp	r2, #115	@ 0x73
    BEQ is_consonant
 8000296:	d036      	beq.n	8000306 <is_consonant>
    CMP R2, #'t'
 8000298:	2a74      	cmp	r2, #116	@ 0x74
    BEQ is_consonant
 800029a:	d034      	beq.n	8000306 <is_consonant>
    CMP R2, #'v'
 800029c:	2a76      	cmp	r2, #118	@ 0x76
    BEQ is_consonant
 800029e:	d032      	beq.n	8000306 <is_consonant>
    CMP R2, #'w'
 80002a0:	2a77      	cmp	r2, #119	@ 0x77
    BEQ is_consonant
 80002a2:	d030      	beq.n	8000306 <is_consonant>
    CMP R2, #'x'
 80002a4:	2a78      	cmp	r2, #120	@ 0x78
    BEQ is_consonant
 80002a6:	d02e      	beq.n	8000306 <is_consonant>
    CMP R2, #'y'
 80002a8:	2a79      	cmp	r2, #121	@ 0x79
    BEQ is_consonant
 80002aa:	d02c      	beq.n	8000306 <is_consonant>
    CMP R2, #'z'
 80002ac:	2a7a      	cmp	r2, #122	@ 0x7a
    BEQ is_consonant
 80002ae:	d02a      	beq.n	8000306 <is_consonant>

    CMP R2, #'B'
 80002b0:	2a42      	cmp	r2, #66	@ 0x42
    BEQ is_consonant
 80002b2:	d028      	beq.n	8000306 <is_consonant>
    CMP R2, #'C'
 80002b4:	2a43      	cmp	r2, #67	@ 0x43
    BEQ is_consonant
 80002b6:	d026      	beq.n	8000306 <is_consonant>
    CMP R2, #'D'
 80002b8:	2a44      	cmp	r2, #68	@ 0x44
    BEQ is_consonant
 80002ba:	d024      	beq.n	8000306 <is_consonant>
    CMP R2, #'F'
 80002bc:	2a46      	cmp	r2, #70	@ 0x46
    BEQ is_consonant
 80002be:	d022      	beq.n	8000306 <is_consonant>
    CMP R2, #'G'
 80002c0:	2a47      	cmp	r2, #71	@ 0x47
    BEQ is_consonant
 80002c2:	d020      	beq.n	8000306 <is_consonant>
    CMP R2, #'H'
 80002c4:	2a48      	cmp	r2, #72	@ 0x48
    BEQ is_consonant
 80002c6:	d01e      	beq.n	8000306 <is_consonant>
    CMP R2, #'J'
 80002c8:	2a4a      	cmp	r2, #74	@ 0x4a
    BEQ is_consonant
 80002ca:	d01c      	beq.n	8000306 <is_consonant>
    CMP R2, #'K'
 80002cc:	2a4b      	cmp	r2, #75	@ 0x4b
    BEQ is_consonant
 80002ce:	d01a      	beq.n	8000306 <is_consonant>
    CMP R2, #'L'
 80002d0:	2a4c      	cmp	r2, #76	@ 0x4c
    BEQ is_consonant
 80002d2:	d018      	beq.n	8000306 <is_consonant>
    CMP R2, #'M'
 80002d4:	2a4d      	cmp	r2, #77	@ 0x4d
    BEQ is_consonant
 80002d6:	d016      	beq.n	8000306 <is_consonant>
    CMP R2, #'N'
 80002d8:	2a4e      	cmp	r2, #78	@ 0x4e
    BEQ is_consonant
 80002da:	d014      	beq.n	8000306 <is_consonant>
    CMP R2, #'P'
 80002dc:	2a50      	cmp	r2, #80	@ 0x50
    BEQ is_consonant
 80002de:	d012      	beq.n	8000306 <is_consonant>
    CMP R2, #'Q'
 80002e0:	2a51      	cmp	r2, #81	@ 0x51
    BEQ is_consonant
 80002e2:	d010      	beq.n	8000306 <is_consonant>
    CMP R2, #'R'
 80002e4:	2a52      	cmp	r2, #82	@ 0x52
    BEQ is_consonant
 80002e6:	d00e      	beq.n	8000306 <is_consonant>
    CMP R2, #'S'
 80002e8:	2a53      	cmp	r2, #83	@ 0x53
    BEQ is_consonant
 80002ea:	d00c      	beq.n	8000306 <is_consonant>
    CMP R2, #'T'
 80002ec:	2a54      	cmp	r2, #84	@ 0x54
    BEQ is_consonant
 80002ee:	d00a      	beq.n	8000306 <is_consonant>
    CMP R2, #'V'
 80002f0:	2a56      	cmp	r2, #86	@ 0x56
    BEQ is_consonant
 80002f2:	d008      	beq.n	8000306 <is_consonant>
    CMP R2, #'W'
 80002f4:	2a57      	cmp	r2, #87	@ 0x57
    BEQ is_consonant
 80002f6:	d006      	beq.n	8000306 <is_consonant>
    CMP R2, #'X'
 80002f8:	2a58      	cmp	r2, #88	@ 0x58
    BEQ is_consonant
 80002fa:	d004      	beq.n	8000306 <is_consonant>
    CMP R2, #'Y'
 80002fc:	2a59      	cmp	r2, #89	@ 0x59
    BEQ is_consonant
 80002fe:	d002      	beq.n	8000306 <is_consonant>
    CMP R2, #'Z'
 8000300:	2a5a      	cmp	r2, #90	@ 0x5a
    BEQ is_consonant
 8000302:	d000      	beq.n	8000306 <is_consonant>

    BX LR                   @ Not a consonant, return
 8000304:	4770      	bx	lr

08000306 <is_consonant>:

is_consonant:
    MOV R3, #1              @ Set R3 to 1 if it's a consonant
 8000306:	f04f 0301 	mov.w	r3, #1
    BX LR
 800030a:	4770      	bx	lr

0800030c <display_result>:

@ -------------------------------------------
@ DISPLAY RESULT ON LEDS
@ -------------------------------------------
display_result:
    MOV R2, R4               @ Load vowel count into led_state by default
 800030c:	4622      	mov	r2, r4
    LDR R6, =led_state
 800030e:	4e15      	ldr	r6, [pc, #84]	@ (8000364 <done+0x16>)
    STRB R2, [R6]            @ Store vowel count in led_state
 8000310:	7032      	strb	r2, [r6, #0]
    BL display_led           @ Display on LEDs
 8000312:	f000 f815 	bl	8000340 <display_led>

08000316 <idle_on>:

idle_on:
    LDR R0, =GPIOA           @ Load GPIOA base address
 8000316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    LDRB R8, [R0, #IDR]      @ Read button input state
 800031a:	f890 8010 	ldrb.w	r8, [r0, #16]
    ANDS R8, #0x01           @ Check if button is pressed
 800031e:	f018 0801 	ands.w	r8, r8, #1
    BEQ idle_on              @ Wait until button is pressed
 8000322:	d0f8      	beq.n	8000316 <idle_on>

    BL button_down           @ Handle button press
 8000324:	f000 f800 	bl	8000328 <button_down>

08000328 <button_down>:

button_down:
    LDR R6, =led_state
 8000328:	4e0e      	ldr	r6, [pc, #56]	@ (8000364 <done+0x16>)
    CMP R2, R4               @ Check if currently showing vowel count
 800032a:	42a2      	cmp	r2, r4
    BEQ switch_to_consonant
 800032c:	d001      	beq.n	8000332 <switch_to_consonant>

    @ If already showing consonants, switch to vowels
    MOV R2, R4               @ Load vowel count into led_state
 800032e:	4622      	mov	r2, r4
    B store_led_state
 8000330:	e000      	b.n	8000334 <store_led_state>

08000332 <switch_to_consonant>:

switch_to_consonant:
    MOV R2, R5               @ Load consonant count into led_state
 8000332:	462a      	mov	r2, r5

08000334 <store_led_state>:

store_led_state:
    STRB R2, [R6]            @ Store new state
 8000334:	7032      	strb	r2, [r6, #0]
    LDR R0, =GPIOE
 8000336:	4809      	ldr	r0, [pc, #36]	@ (800035c <done+0xe>)
    STRB R2, [R0, #ODR + 1]  @ Update LED output
 8000338:	7542      	strb	r2, [r0, #21]

    BL delay_function
 800033a:	f000 f806 	bl	800034a <delay_function>
    B idle_on
 800033e:	e7ea      	b.n	8000316 <idle_on>

08000340 <display_led>:

@ -------------------------------------------
@ DISPLAY LED
@ -------------------------------------------
display_led:
    LDR R6, =led_state
 8000340:	4e08      	ldr	r6, [pc, #32]	@ (8000364 <done+0x16>)
    LDRB R7, [R6]            @ Load LED state value
 8000342:	7837      	ldrb	r7, [r6, #0]
    LDR R0, =GPIOE
 8000344:	4805      	ldr	r0, [pc, #20]	@ (800035c <done+0xe>)
    STRB R7, [R0, #ODR + 1]  @ Write to LED output register
 8000346:	7547      	strb	r7, [r0, #21]
    BX LR
 8000348:	4770      	bx	lr

0800034a <delay_function>:


delay_function:
	LDR R9, =0xFFFFF	@ Load delay counter
 800034a:	f8df 901c 	ldr.w	r9, [pc, #28]	@ 8000368 <done+0x1a>

0800034e <done>:

done:
	SUBS R9, 0x01	@ Decrement delay counter
 800034e:	f1b9 0901 	subs.w	r9, r9, #1
	BNE done	@ Loop until counter reaches zero
 8000352:	d1fc      	bne.n	800034e <done>

	BX LR	@ Return from function
 8000354:	4770      	bx	lr
 8000356:	0000      	.short	0x0000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000358:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800035c:	48001000 	.word	0x48001000
    LDR R1, =ascii_string    @ Load the address of the input string
 8000360:	20000024 	.word	0x20000024
    LDR R6, =led_state
 8000364:	2000002b 	.word	0x2000002b
	LDR R9, =0xFFFFF	@ Load delay counter
 8000368:	000fffff 	.word	0x000fffff

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	@ (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	@ (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	@ (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	@ (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	@ (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 f811 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ff24 	bl	80001ea <main>

080003a2 <LoopForever>:

LoopForever:
  b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80003b0:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 80003b4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80003b8:	20000048 	.word	0x20000048

080003bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>
	...

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	@ (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	@ (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
