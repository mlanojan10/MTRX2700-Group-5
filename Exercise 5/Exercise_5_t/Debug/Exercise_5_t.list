
Exercise_5_t.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f8  080004f8  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00002040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004f8  080004f8  00002040  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004f8  080004f8  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004fc  080004fc  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08000500  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00002040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00002040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 13 .debug_line   000001e2  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a3  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000234a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000098  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004e0 	.word	0x080004e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	080004e0 	.word	0x080004e0

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4894      	ldr	r0, [pc, #592]	@ (8000428 <loop_forever_reset+0x8>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	@ 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:
@ function to enable a UART device - this requires:
@  setting the alternate pin functions for the UART (select the pins you want to use)
@
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4892      	ldr	r0, [pc, #584]	@ (800042c <loop_forever_reset+0xc>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_usart1>:
enable_usart1:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001ea:	4891      	ldr	r0, [pc, #580]	@ (8000430 <loop_forever_reset+0x10>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001ec:	f04f 0177 	mov.w	r1, #119	@ 0x77
	STRB R1, [R0, AFRL + 2]
 80001f0:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001f4:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001f6:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
	STR R1, [R0, GPIO_MODER]
 80001fa:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001fc:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001fe:	f441 6170 	orr.w	r1, r1, #3840	@ 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000202:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000204:	4888      	ldr	r0, [pc, #544]	@ (8000428 <loop_forever_reset+0x8>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000206:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN  @ apply the bit mask to the previous values of the enable the UART
 8000208:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 800020c:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800020e:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =USART1 @ the base address for the register to turn clocks on/off
 8000212:	4888      	ldr	r0, [pc, #544]	@ (8000434 <loop_forever_reset+0x14>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000214:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =USART1 @ the base address for the register to set up the specified UART
 8000216:	4887      	ldr	r0, [pc, #540]	@ (8000434 <loop_forever_reset+0x14>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000218:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800021a:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800021e:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000220:	4770      	bx	lr

08000222 <enable_uart4>:
enable_uart4:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 8000222:	4883      	ldr	r0, [pc, #524]	@ (8000430 <loop_forever_reset+0x10>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x55
 8000224:	f04f 0155 	mov.w	r1, #85	@ 0x55
	STRB R1, [R0, AFRH + 1] @Should this be?
 8000228:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 800022c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00000 @ Mask for pins to change to 'alternate function mode'
 800022e:	f441 0120 	orr.w	r1, r1, #10485760	@ 0xa00000
	STR R1, [R0, GPIO_MODER]
 8000232:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 8000234:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00000 @ Mask for pins to be set as high speed
 8000236:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
	STR R1, [R0, GPIO_OSPEEDR]
 800023a:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800023c:	487a      	ldr	r0, [pc, #488]	@ (8000428 <loop_forever_reset+0x8>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 800023e:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN  @ apply the bit mask to the previous values of the enable the UART
 8000240:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 8000244:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000246:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 800024a:	487b      	ldr	r0, [pc, #492]	@ (8000438 <loop_forever_reset+0x18>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800024c:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART4 @ the base address for the register to set up the specified UART
 800024e:	487a      	ldr	r0, [pc, #488]	@ (8000438 <loop_forever_reset+0x18>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000250:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000252:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000256:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000258:	4770      	bx	lr

0800025a <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800025a:	4873      	ldr	r0, [pc, #460]	@ (8000428 <loop_forever_reset+0x8>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800025c:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 800025e:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000262:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000266:	6001      	str	r1, [r0, #0]

08000268 <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000268:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 800026a:	f411 3f00 	tst.w	r1, #131072	@ 0x20000
	BEQ wait_for_HSERDY
 800026e:	d0fb      	beq.n	8000268 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 8000270:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 8000272:	f44f 02a2 	mov.w	r2, #5308416	@ 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000276:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 800027a:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800027c:	486a      	ldr	r0, [pc, #424]	@ (8000428 <loop_forever_reset+0x8>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800027e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 8000280:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000284:	6001      	str	r1, [r0, #0]

08000286 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000286:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000288:	f011 7f00 	tst.w	r1, #33554432	@ 0x2000000
	BEQ wait_for_PLLRDY
 800028c:	d0fb      	beq.n	8000286 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800028e:	4866      	ldr	r0, [pc, #408]	@ (8000428 <loop_forever_reset+0x8>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000290:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000292:	f240 4202 	movw	r2, #1026	@ 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000296:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 800029a:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800029c:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 800029e:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 80002a2:	6041      	str	r1, [r0, #4]

	BX LR @ return
 80002a4:	4770      	bx	lr

080002a6 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002a6:	4860      	ldr	r0, [pc, #384]	@ (8000428 <loop_forever_reset+0x8>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 80002a8:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 80002aa:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 80002ae:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 80002b0:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 80002b2:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 80002b6:	6181      	str	r1, [r0, #24]

	BX LR @ return
 80002b8:	4770      	bx	lr

080002ba <cipher_main>:

.text

cipher_main:

    MOV R0, #3             @ Shift value (Change for encoding/decoding)
 80002ba:	f04f 0003 	mov.w	r0, #3

    BL caesar_cipher       @ Call Caesar Cipher function
 80002be:	f000 f804 	bl	80002ca <caesar_cipher>

	LDR R2, =user_defined_terminating_character
 80002c2:	4a5e      	ldr	r2, [pc, #376]	@ (800043c <loop_forever_reset+0x1c>)
	@ dereference the terminating character, store it in R2
	LDRB R2, [R2]
 80002c4:	7812      	ldrb	r2, [r2, #0]
	STRB R2, [R1, R3] @Store the terminating_character in R1 (the buffer).
 80002c6:	54ca      	strb	r2, [r1, r3]
   	B tx_uart @ Begin transmission
 80002c8:	e09e      	b.n	8000408 <tx_uart>

080002ca <caesar_cipher>:

@ Function: Apply Caesar Cipher with shift value in R2
caesar_cipher:
    PUSH {LR}              @ Save return address
 80002ca:	b500      	push	{lr}

080002cc <cipher_loop>:

cipher_loop:
    LDRB R5, [R1]          @ Load current character
 80002cc:	780d      	ldrb	r5, [r1, #0]
    CMP R5, #0             @ Check if null terminator
 80002ce:	2d00      	cmp	r5, #0
    BEQ cipher_done        @ If null, exit function
 80002d0:	d017      	beq.n	8000302 <cipher_done>

    CMP R5, #'A'           @ Check if char is >= 'A'
 80002d2:	2d41      	cmp	r5, #65	@ 0x41
    BLT check_lower        @ If less, check lowercase range
 80002d4:	db01      	blt.n	80002da <check_lower>
    CMP R5, #'Z'           @ Check if char is <= 'Z'
 80002d6:	2d5a      	cmp	r5, #90	@ 0x5a
    BLE shift_upper        @ If in uppercase range, shift it
 80002d8:	dd04      	ble.n	80002e4 <shift_upper>

080002da <check_lower>:

check_lower:
    CMP R5, #'a'           @ Check if char is >= 'a'
 80002da:	2d61      	cmp	r5, #97	@ 0x61
    BLT next_char          @ If less, it's not a letter, skip
 80002dc:	db0e      	blt.n	80002fc <next_char>
    CMP R5, #'z'           @ Check if char is <= 'z'
 80002de:	2d7a      	cmp	r5, #122	@ 0x7a
    BLE shift_lower        @ If in lowercase range, shift it
 80002e0:	dd06      	ble.n	80002f0 <shift_lower>
    B next_char            @ Otherwise, move to next character
 80002e2:	e00b      	b.n	80002fc <next_char>

080002e4 <shift_upper>:

@ Shift uppercase letters
shift_upper:
    ADD R5, R5, R0         @ Apply shift
 80002e4:	4405      	add	r5, r0
    CMP R5, #'Z'           @ Check if it exceeds 'Z'
 80002e6:	2d5a      	cmp	r5, #90	@ 0x5a
    BLE store_char         @ If within range, store
 80002e8:	dd07      	ble.n	80002fa <store_char>
    SUB R5, R5, #26        @ Wrap around
 80002ea:	f1a5 051a 	sub.w	r5, r5, #26
    B store_char
 80002ee:	e004      	b.n	80002fa <store_char>

080002f0 <shift_lower>:

@ Shift lowercase letters
shift_lower:
    ADD R5, R5, R0         @ Apply shift
 80002f0:	4405      	add	r5, r0
    CMP R5, #'z'           @ Check if it exceeds 'z'
 80002f2:	2d7a      	cmp	r5, #122	@ 0x7a
    BLE store_char         @ If within range, store
 80002f4:	dd01      	ble.n	80002fa <store_char>
    SUB R5, R5, #26        @ Wrap around
 80002f6:	f1a5 051a 	sub.w	r5, r5, #26

080002fa <store_char>:

store_char:
    STRB R5, [R1]          @ Store modified character
 80002fa:	700d      	strb	r5, [r1, #0]

080002fc <next_char>:

next_char:
    ADD R1, R1, #1         @ Move to next character
 80002fc:	f101 0101 	add.w	r1, r1, #1
    B cipher_loop          @ Repeat loop
 8000300:	e7e4      	b.n	80002cc <cipher_loop>

08000302 <cipher_done>:

cipher_done:
    POP {LR}               @ Restore return address
 8000302:	f85d eb04 	ldr.w	lr, [sp], #4
    BX LR                  @ Return
 8000306:	4770      	bx	lr

08000308 <palindrome_check_main>:

.text

@ Exercise 1 b)
palindrome_check_main:
    BL string_length             @ Get string length in R4
 8000308:	f000 f804 	bl	8000314 <string_length>
    SUB R4, R4, #1               @ Adjust index to last character
 800030c:	f1a4 0401 	sub.w	r4, r4, #1

    BL palindrome_checker        @ Call palindrome checker
 8000310:	f000 f809 	bl	8000326 <palindrome_checker>

08000314 <string_length>:


@ Function to compute string length
string_length:
    MOV R4, #0                   @ Initialize counter
 8000314:	f04f 0400 	mov.w	r4, #0

08000318 <length_loop>:
length_loop:
    LDRB R2, [R1, R4]            @ Load byte from string
 8000318:	5d0a      	ldrb	r2, [r1, r4]
    CMP R2, #0                   @ Check if null terminator
 800031a:	2a00      	cmp	r2, #0
    BEQ length_done              @ If null, exit
 800031c:	d002      	beq.n	8000324 <length_done>
    ADD R4, R4, #1               @ Increment counter
 800031e:	f104 0401 	add.w	r4, r4, #1
    B length_loop                @ Repeat
 8000322:	e7f9      	b.n	8000318 <length_loop>

08000324 <length_done>:
length_done:
    BX LR                        @ Return to caller
 8000324:	4770      	bx	lr

08000326 <palindrome_checker>:

@ Palindrome checker (case-insensitive, ignoring special characters)
palindrome_checker:
    MOV R5, #0             		 @ Initialize front index (R5)
 8000326:	f04f 0500 	mov.w	r5, #0
    MOV R6, R4             		 @ Initialize back index (R6)
 800032a:	4626      	mov	r6, r4

0800032c <palindrome_loop>:

palindrome_loop:
    CMP R5, R6            	     @ Check if front index meets or crosses back index
 800032c:	42b5      	cmp	r5, r6
    BGE is_palindrome     	     @ If crossed, string is palindrome
 800032e:	da40      	bge.n	80003b2 <is_palindrome>

08000330 <skip_front>:

@ Skip non-alphanumeric characters (Front)
skip_front:
    LDRB R7, [R1, R5]     	     @ Load front character
 8000330:	5d4f      	ldrb	r7, [r1, r5]
    BL is_alphanumeric    	     @ Check if it's alphanumeric
 8000332:	f000 f828 	bl	8000386 <is_alphanumeric>
    CMP R0, #0             	     @ If not, move to next character
 8000336:	2800      	cmp	r0, #0
    BEQ increment_front          @ Skip if non-alphanumeric
 8000338:	d000      	beq.n	800033c <increment_front>
    B check_back                 @ Otherwise, check back index
 800033a:	e002      	b.n	8000342 <check_back>

0800033c <increment_front>:

increment_front:
    ADD R5, R5, #1               @ Move to next character from the start
 800033c:	f105 0501 	add.w	r5, r5, #1
    B palindrome_loop            @ Restart loop
 8000340:	e7f4      	b.n	800032c <palindrome_loop>

08000342 <check_back>:

@ Skip non-alphanumeric characters (Back)
check_back:
    LDRB R8, [R1, R6]            @ Load back character
 8000342:	f811 8006 	ldrb.w	r8, [r1, r6]
    BL is_alphanumeric           @ Check if it's alphanumeric
 8000346:	f000 f81e 	bl	8000386 <is_alphanumeric>
    CMP R0, #0                   @ If not, move to previous character
 800034a:	2800      	cmp	r0, #0
    BEQ decrement_back           @ Skip if non-alphanumeric
 800034c:	d000      	beq.n	8000350 <decrement_back>
    B compare_chars              @ Otherwise, compare characters
 800034e:	e002      	b.n	8000356 <compare_chars>

08000350 <decrement_back>:

decrement_back:
    SUB R6, R6, #1               @ Move to previous character from the end
 8000350:	f1a6 0601 	sub.w	r6, r6, #1
    B palindrome_loop            @ Restart loop
 8000354:	e7ea      	b.n	800032c <palindrome_loop>

08000356 <compare_chars>:

@ Compare characters after filtering
compare_chars:
    BL to_lowercase              @ Convert both characters to lowercase
 8000356:	f000 f807 	bl	8000368 <to_lowercase>

    CMP R7, R8                   @ Compare characters
 800035a:	4547      	cmp	r7, r8
    BNE not_a_palindrome         @ If mismatch, not a palindrome
 800035c:	d125      	bne.n	80003aa <not_a_palindrome>

    ADD R5, R5, #1               @ Move to next character from the start
 800035e:	f105 0501 	add.w	r5, r5, #1
    SUB R6, R6, #1               @ Move to next character from the end
 8000362:	f1a6 0601 	sub.w	r6, r6, #1
    B palindrome_loop            @ Repeat check
 8000366:	e7e1      	b.n	800032c <palindrome_loop>

08000368 <to_lowercase>:

@ Convert R7 and R8 to lowercase if they are uppercase
to_lowercase:
    CMP R7, #0x41                @ Compare front char with 'A'
 8000368:	2f41      	cmp	r7, #65	@ 0x41
    BLT skip_lower_R7            @ If less than 'A', skip conversion
 800036a:	db03      	blt.n	8000374 <skip_lower_R7>
    CMP R7, #0x5A                @ Compare front char with 'Z'
 800036c:	2f5a      	cmp	r7, #90	@ 0x5a
    BGT skip_lower_R7            @ If greater than 'Z', skip conversion
 800036e:	dc01      	bgt.n	8000374 <skip_lower_R7>
    ADD R7, R7, #0x20            @ Convert to lowercase
 8000370:	f107 0720 	add.w	r7, r7, #32

08000374 <skip_lower_R7>:

skip_lower_R7:
    CMP R8, #0x41                @ Compare back char with 'A'
 8000374:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
    BLT skip_lower_R8            @ If less than 'A', skip conversion
 8000378:	db04      	blt.n	8000384 <skip_lower_R8>
    CMP R8, #0x5A                @ Compare back char with 'Z'
 800037a:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
    BGT skip_lower_R8            @ If greater than 'Z', skip conversion
 800037e:	dc01      	bgt.n	8000384 <skip_lower_R8>
    ADD R8, R8, #0x20            @ Convert to lowercase
 8000380:	f108 0820 	add.w	r8, r8, #32

08000384 <skip_lower_R8>:

skip_lower_R8:
    BX LR                        @ Return
 8000384:	4770      	bx	lr

08000386 <is_alphanumeric>:

@ Check if R7 or R8 is alphanumeric (A-Z, a-z, 0-9)
is_alphanumeric:
    CMP R7, #0x30                @ Compare with '0'
 8000386:	2f30      	cmp	r7, #48	@ 0x30
    BLT not_alphanumeric         @ If less than '0', not alphanumeric
 8000388:	db09      	blt.n	800039e <not_alphanumeric>
    CMP R7, #0x39                @ Compare with '9'
 800038a:	2f39      	cmp	r7, #57	@ 0x39
    BLE is_valid                 @ If between '0' and '9', alphanumeric
 800038c:	dd0a      	ble.n	80003a4 <is_valid>

    CMP R7, #0x41                @ Compare with 'A'
 800038e:	2f41      	cmp	r7, #65	@ 0x41
    BLT not_alphanumeric         @ If less than 'A', not alphanumeric
 8000390:	db05      	blt.n	800039e <not_alphanumeric>
    CMP R7, #0x5A                @ Compare with 'Z'
 8000392:	2f5a      	cmp	r7, #90	@ 0x5a
    BLE is_valid                 @ If between 'A' and 'Z', alphanumeric
 8000394:	dd06      	ble.n	80003a4 <is_valid>

    CMP R7, #0x61                @ Compare with 'a'
 8000396:	2f61      	cmp	r7, #97	@ 0x61
    BLT not_alphanumeric         @ If less than 'a', not alphanumeric
 8000398:	db01      	blt.n	800039e <not_alphanumeric>
    CMP R7, #0x7A                @ Compare with 'z'
 800039a:	2f7a      	cmp	r7, #122	@ 0x7a
    BLE is_valid                 @ If between 'a' and 'z', alphanumeric
 800039c:	dd02      	ble.n	80003a4 <is_valid>

0800039e <not_alphanumeric>:

not_alphanumeric:
    MOV R0, #0                   @ Not alphanumeric
 800039e:	f04f 0000 	mov.w	r0, #0
    BX LR
 80003a2:	4770      	bx	lr

080003a4 <is_valid>:

is_valid:
    MOV R0, #1                   @ Is alphanumeric
 80003a4:	f04f 0001 	mov.w	r0, #1
    BX LR
 80003a8:	4770      	bx	lr

080003aa <not_a_palindrome>:

not_a_palindrome:
	LDR R2, =user_defined_terminating_character
 80003aa:	4a24      	ldr	r2, [pc, #144]	@ (800043c <loop_forever_reset+0x1c>)
	@ dereference the terminating character, store it in R2
	LDRB R2, [R2]
 80003ac:	7812      	ldrb	r2, [r2, #0]
	STRB R2, [R1, R3] @Store the terminating_character in R1 (the buffer).
 80003ae:	54ca      	strb	r2, [r1, r3]
    B tx_uart
 80003b0:	e02a      	b.n	8000408 <tx_uart>

080003b2 <is_palindrome>:

is_palindrome:
    B cipher_main @ cipher the string if palindrome
 80003b2:	e782      	b.n	80002ba <cipher_main>

080003b4 <main>:


@ this is the entry function
main:

	BL initialise_power
 80003b4:	f7ff ff77 	bl	80002a6 <initialise_power>
	BL enable_peripheral_clocks
 80003b8:	f7ff ff0c 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board
 80003bc:	f7ff ff10 	bl	80001e0 <initialise_discovery_board>
	BL enable_usart1 @The transmission board recieves on USART1
 80003c0:	f7ff ff13 	bl	80001ea <enable_usart1>
	BL enable_uart4 @The transmission board transmis on UART4.
 80003c4:	f7ff ff2d 	bl	8000222 <enable_uart4>

	@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and terminating character
	LDR R1, =incoming_buffer
 80003c8:	491d      	ldr	r1, [pc, #116]	@ (8000440 <loop_forever_reset+0x20>)
	LDR R2, =user_defined_terminating_character
 80003ca:	4a1c      	ldr	r2, [pc, #112]	@ (800043c <loop_forever_reset+0x1c>)

	@ dereference the terminating character, store it in R2
	LDRB R2, [R2]
 80003cc:	7812      	ldrb	r2, [r2, #0]

	@ Keep a count of how many bytes have been received
	MOV R3, #0x00
 80003ce:	f04f 0300 	mov.w	r3, #0

080003d2 <loop_forever>:


@ continue reading from USART1 until a terminating character is detected.
loop_forever:

	LDR R4, =USART1 @ the base address for the register to set up USART1
 80003d2:	4c18      	ldr	r4, [pc, #96]	@ (8000434 <loop_forever_reset+0x14>)

	LDR R5, [R4, USART_ISR] @ load the status of USART1 into R5
 80003d4:	69e5      	ldr	r5, [r4, #28]

	TST R5, 1 << UART_ORE | 1 << UART_FE  @ Checking for error and clearing
 80003d6:	f015 0f0a 	tst.w	r5, #10
	BNE clear_error
 80003da:	d110      	bne.n	80003fe <clear_error>

	TST R5, 1 << UART_RXNE @Check if there is a character to read.
 80003dc:	f015 0f20 	tst.w	r5, #32
	BEQ loop_forever @ loop back if there was no character to read
 80003e0:	d0f7      	beq.n	80003d2 <loop_forever>

	LDRB R6, [R4, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 80003e2:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
	CMP R2, R6 @ checks if the termination character has been reached
 80003e6:	42b2      	cmp	r2, r6
	BNE no_reset
 80003e8:	d101      	bne.n	80003ee <no_reset>

	BL palindrome_check_main @ check is the string palindrom or not
 80003ea:	f7ff ff8d 	bl	8000308 <palindrome_check_main>

080003ee <no_reset>:

@ When not at termination character, resets the stats of USART1
no_reset:

	STRB R6, [R1, R3] @Store the byte in R1 (the buffer).
 80003ee:	54ce      	strb	r6, [r1, r3]
	ADD R3, #1 @Increment the location of where the byte should be stored in R1.
 80003f0:	f103 0301 	add.w	r3, r3, #1

	@ load the status of the UART
	LDR R5, [R4, USART_RQR]
 80003f4:	69a5      	ldr	r5, [r4, #24]
	ORR R5, 1 << UART_RXFRQ
 80003f6:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R4, USART_RQR] @Resets the status of USART1
 80003fa:	61a5      	str	r5, [r4, #24]

	BGT loop_forever
 80003fc:	dce9      	bgt.n	80003d2 <loop_forever>

080003fe <clear_error>:

@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
clear_error:

	LDR R5, [R4, USART_ICR] @ loading the UART clear flag section
 80003fe:	6a25      	ldr	r5, [r4, #32]
	ORR R5, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
 8000400:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R4, USART_ICR] @ storing the cleared flags in the clear flag section
 8000404:	6225      	str	r5, [r4, #32]
	B loop_forever
 8000406:	e7e4      	b.n	80003d2 <loop_forever>

08000408 <tx_uart>:

@ Transmits the characters from serial monitor to the UART
tx_uart:
	LDR R0, =UART4 @ the base address for the register to set up UART4
 8000408:	480b      	ldr	r0, [pc, #44]	@ (8000438 <loop_forever_reset+0x18>)

	LDR R5, [R0, USART_ISR] @ load the status of the UART
 800040a:	69c5      	ldr	r5, [r0, #28]
	ANDS R5, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
 800040c:	f015 0580 	ands.w	r5, r5, #128	@ 0x80
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart
 8000410:	d0fa      	beq.n	8000408 <tx_uart>

	@ load the next value in the string into the transmit buffer for UART4
	LDRB R7, [R1], #1 @Accessing current value of the string to transmit
 8000412:	f811 7b01 	ldrb.w	r7, [r1], #1
	STRB R7, [R0, USART_TDR] @Shifts to the next byte
 8000416:	f880 7028 	strb.w	r7, [r0, #40]	@ 0x28

	@ check terminating pointer
	CMP R7, R2
 800041a:	4297      	cmp	r7, r2
	BEQ loop_forever_reset @ end transmit and wating for next trans
 800041c:	d000      	beq.n	8000420 <loop_forever_reset>

	@ loop back to the start
	B tx_uart
 800041e:	e7f3      	b.n	8000408 <tx_uart>

08000420 <loop_forever_reset>:


@ Resets the buffers to allow for process to start again
loop_forever_reset:
	LDR R1, =incoming_buffer
 8000420:	4907      	ldr	r1, [pc, #28]	@ (8000440 <loop_forever_reset+0x20>)
	MOV R3, #0x00
 8000422:	f04f 0300 	mov.w	r3, #0
	B loop_forever
 8000426:	e7d4      	b.n	80003d2 <loop_forever>
	LDR R0, =RCC
 8000428:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800042c:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 8000430:	48000800 	.word	0x48000800
	LDR R0, =USART1 @ the base address for the register to turn clocks on/off
 8000434:	40013800 	.word	0x40013800
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 8000438:	40004c00 	.word	0x40004c00
	LDR R2, =user_defined_terminating_character
 800043c:	2000003e 	.word	0x2000003e
	LDR R1, =incoming_buffer
 8000440:	20000000 	.word	0x20000000

08000444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000444:	480d      	ldr	r0, [pc, #52]	@ (800047c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000448:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <LoopForever+0x6>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	@ (8000484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <LoopForever+0xe>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	@ (800048c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	@ (8000490 <LoopForever+0x16>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000472:	f000 f811 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff ff9d 	bl	80003b4 <main>

0800047a <LoopForever>:

LoopForever:
  b LoopForever
 800047a:	e7fe      	b.n	800047a <LoopForever>
  ldr   r0, =_estack
 800047c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000488:	08000500 	.word	0x08000500
  ldr r2, =_sbss
 800048c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000490:	2000005c 	.word	0x2000005c

08000494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC1_2_IRQHandler>
	...

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	@ (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	@ (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	@ (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	@ (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	080004f8 	.word	0x080004f8
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f8 	.word	0x080004f8
 80004dc:	080004fc 	.word	0x080004fc

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
