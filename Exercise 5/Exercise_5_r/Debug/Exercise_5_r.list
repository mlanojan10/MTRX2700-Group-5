
Exercise_5_r.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c0  080004c0  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c0  080004c0  00002048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004c0  080004c0  00002048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004c0  080004c0  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c4  080004c4  000014c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  080004c8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002048  2**0
                  CONTENTS
 10 .bss          0000001c  20000048  20000048  00002048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00002048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY
 13 .debug_line   000001b7  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000090  00000000  00000000  0000222f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000022bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000098  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000048 	.word	0x20000048
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004a8 	.word	0x080004a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000004c 	.word	0x2000004c
 80001d0:	080004a8 	.word	0x080004a8

080001d4 <enable_timer2_clock>:
#include "definitions.s"


enable_timer2_clock:

	LDR R0, =RCC	@ load the base address for the timer
 80001d4:	4884      	ldr	r0, [pc, #528]	@ (80003e8 <loop_forever_reset+0xa>)
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] @ enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]
	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001e0:	4881      	ldr	r0, [pc, #516]	@ (80003e8 <loop_forever_reset+0xa>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001e4:	f441 1178 	orr.w	r1, r1, #4063232	@ 0x3e0000
	STR R1, [R0, #AHBENR]
 80001e8:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001ea:	4770      	bx	lr

080001ec <trigger_prescaler>:


trigger_prescaler:
	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 80001ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

	LDR R1, =500000 @ make the timer overflow after counting to 500000
 80001f0:	497e      	ldr	r1, [pc, #504]	@ (80003ec <loop_forever_reset+0xe>)
	STR R1, [R0, TIM_ARR] @ set the ARR register
 80001f2:	62c1      	str	r1, [r0, #44]	@ 0x2c

	LDR R8, =0x00
 80001f4:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT] @ reset the clock
 80001f8:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 80001fc:	bf00      	nop
	NOP
 80001fe:	bf00      	nop
	BX LR
 8000200:	4770      	bx	lr

08000202 <initialise_discovery_board>:

@ function to enable a UART device - this requires:
@  setting the alternate pin functions for the UART (select the pins you want to use)
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000202:	487b      	ldr	r0, [pc, #492]	@ (80003f0 <loop_forever_reset+0x12>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 8000204:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 8000208:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 800020a:	4770      	bx	lr

0800020c <enable_uart5>:
enable_uart5:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOD
 800020c:	4879      	ldr	r0, [pc, #484]	@ (80003f4 <loop_forever_reset+0x16>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x05
 800020e:	f04f 0105 	mov.w	r1, #5
	STRB R1, [R0, AFRL + 1] @Should this be?
 8000212:	f880 1021 	strb.w	r1, [r0, #33]	@ 0x21

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 8000216:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0x20 @ Mask for pins to change to 'alternate function mode'
 8000218:	f041 0120 	orr.w	r1, r1, #32
	STR R1, [R0, GPIO_MODER]
 800021c:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 800021e:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0x30 @ Mask for pins to be set as high speed
 8000220:	f041 0130 	orr.w	r1, r1, #48	@ 0x30
	STR R1, [R0, GPIO_OSPEEDR]
 8000224:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000226:	4870      	ldr	r0, [pc, #448]	@ (80003e8 <loop_forever_reset+0xa>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 8000228:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART5_EN  @ apply the bit mask to the previous values of the enable the UART
 800022a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 800022e:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000230:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART5 @ the base address for the register to turn clocks on/off
 8000234:	4870      	ldr	r0, [pc, #448]	@ (80003f8 <loop_forever_reset+0x1a>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000236:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART5 @ the base address for the register to set up the specified UART
 8000238:	486f      	ldr	r0, [pc, #444]	@ (80003f8 <loop_forever_reset+0x1a>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 800023a:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800023c:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000240:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000242:	4770      	bx	lr

08000244 <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000244:	4868      	ldr	r0, [pc, #416]	@ (80003e8 <loop_forever_reset+0xa>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000246:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 8000248:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 800024c:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000250:	6001      	str	r1, [r0, #0]

08000252 <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000252:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 8000254:	f411 3f00 	tst.w	r1, #131072	@ 0x20000
	BEQ wait_for_HSERDY
 8000258:	d0fb      	beq.n	8000252 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 800025a:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 800025c:	f44f 02a2 	mov.w	r2, #5308416	@ 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000260:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 8000264:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000266:	4860      	ldr	r0, [pc, #384]	@ (80003e8 <loop_forever_reset+0xa>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000268:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 800026a:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 800026e:	6001      	str	r1, [r0, #0]

08000270 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000270:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000272:	f011 7f00 	tst.w	r1, #33554432	@ 0x2000000
	BEQ wait_for_PLLRDY
 8000276:	d0fb      	beq.n	8000270 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000278:	485b      	ldr	r0, [pc, #364]	@ (80003e8 <loop_forever_reset+0xa>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800027a:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 800027c:	f240 4202 	movw	r2, #1026	@ 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000280:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000284:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000286:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 8000288:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 800028c:	6041      	str	r1, [r0, #4]

	BX LR @ return
 800028e:	4770      	bx	lr

08000290 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000290:	4855      	ldr	r0, [pc, #340]	@ (80003e8 <loop_forever_reset+0xa>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000292:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000294:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 8000298:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800029a:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800029c:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 80002a0:	6181      	str	r1, [r0, #24]

	BX LR @ return
 80002a2:	4770      	bx	lr

080002a4 <delay_loop>:

delay_loop:
    LDR R0, =TIM2 @  load the base address for the timer
 80002a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

080002a8 <wait_for_update>:
wait_for_update:
    LDRB R9, [R0, #TIM_SR] @ load a byte from TIM_SR
 80002a8:	f890 9010 	ldrb.w	r9, [r0, #16]
    ANDS R9, R9, #0x1 @ Check UIF flag
 80002ac:	f019 0901 	ands.w	r9, r9, #1
    BEQ wait_for_update @ if there is no flag rising, waiting for flag
 80002b0:	d0fa      	beq.n	80002a8 <wait_for_update>
    MOV R10, #0x0
 80002b2:	f04f 0a00 	mov.w	sl, #0
    STRB R10, [R0, #TIM_SR] @ clean the flag
 80002b6:	f880 a010 	strb.w	sl, [r0, #16]
    BX LR
 80002ba:	4770      	bx	lr

080002bc <cipher_main>:
.text

@ Exercise  1 c)
cipher_main:

   	MOV R0, #-3             @ Shift value (Change for encoding/decoding)
 80002bc:	f06f 0002 	mvn.w	r0, #2

    BL caesar_cipher       @ Call Caesar Cipher function
 80002c0:	f000 f801 	bl	80002c6 <caesar_cipher>

    B LED_pre
 80002c4:	e048      	b.n	8000358 <LED_pre>

080002c6 <caesar_cipher>:

@ Function: Apply Caesar Cipher with shift value in R2
caesar_cipher:
    PUSH {LR}              @ Save return address
 80002c6:	b500      	push	{lr}
    MOV R4, R1             @ Copy string address into R4 (iterator)
 80002c8:	460c      	mov	r4, r1

080002ca <cipher_loop>:

cipher_loop:
    LDRB R5, [R4]          @ Load current character
 80002ca:	7825      	ldrb	r5, [r4, #0]
    CMP R5, #0             @ Check if null terminator
 80002cc:	2d00      	cmp	r5, #0
    BEQ cipher_done        @ If null, exit function
 80002ce:	d017      	beq.n	8000300 <cipher_done>

    CMP R5, #'A'           @ Check if char is >= 'A'
 80002d0:	2d41      	cmp	r5, #65	@ 0x41
    BLT check_lower        @ If less, check lowercase range
 80002d2:	db01      	blt.n	80002d8 <check_lower>
    CMP R5, #'Z'           @ Check if char is <= 'Z'
 80002d4:	2d5a      	cmp	r5, #90	@ 0x5a
    BLE shift_upper        @ If in uppercase range, shift it
 80002d6:	dd04      	ble.n	80002e2 <shift_upper>

080002d8 <check_lower>:

check_lower:
    CMP R5, #'a'           @ Check if char is >= 'a'
 80002d8:	2d61      	cmp	r5, #97	@ 0x61
    BLT next_char          @ If less, it's not a letter, skip
 80002da:	db0e      	blt.n	80002fa <next_char>
    CMP R5, #'z'           @ Check if char is <= 'z'
 80002dc:	2d7a      	cmp	r5, #122	@ 0x7a
    BLE shift_lower        @ If in lowercase range, shift it
 80002de:	dd06      	ble.n	80002ee <shift_lower>
    B next_char            @ Otherwise, move to next character
 80002e0:	e00b      	b.n	80002fa <next_char>

080002e2 <shift_upper>:

@ Shift uppercase letters
shift_upper:
    ADD R5, R5, R0         @ Apply shift
 80002e2:	4405      	add	r5, r0
    CMP R5, #'Z'           @ Check if it exceeds 'Z'
 80002e4:	2d5a      	cmp	r5, #90	@ 0x5a
    BLE store_char         @ If within range, store
 80002e6:	dd07      	ble.n	80002f8 <store_char>
    SUB R5, R5, #26        @ Wrap around
 80002e8:	f1a5 051a 	sub.w	r5, r5, #26
    B store_char
 80002ec:	e004      	b.n	80002f8 <store_char>

080002ee <shift_lower>:

@ Shift lowercase letters
shift_lower:
    ADD R5, R5, R0         @ Apply shift
 80002ee:	4405      	add	r5, r0
    CMP R5, #'z'           @ Check if it exceeds 'z'
 80002f0:	2d7a      	cmp	r5, #122	@ 0x7a
    BLE store_char         @ If within range, store
 80002f2:	dd01      	ble.n	80002f8 <store_char>
    SUB R5, R5, #26        @ Wrap around
 80002f4:	f1a5 051a 	sub.w	r5, r5, #26

080002f8 <store_char>:

store_char:
    STRB R5, [R4]          @ Store modified character
 80002f8:	7025      	strb	r5, [r4, #0]

080002fa <next_char>:

next_char:
    ADD R4, R4, #1         @ Move to next character
 80002fa:	f104 0401 	add.w	r4, r4, #1
    B cipher_loop          @ Repeat loop
 80002fe:	e7e4      	b.n	80002ca <cipher_loop>

08000300 <cipher_done>:

cipher_done:
    POP {LR}               @ Restore return address
 8000300:	f85d eb04 	ldr.w	lr, [sp], #4
    BX LR                  @ Return
 8000304:	4770      	bx	lr

08000306 <main>:
.text
@ define text

@ this is the entry function called from the c file
main:
	BL enable_timer2_clock
 8000306:	f7ff ff65 	bl	80001d4 <enable_timer2_clock>
	BL initialise_power
 800030a:	f7ff ffc1 	bl	8000290 <initialise_power>
	BL enable_peripheral_clocks
 800030e:	f7ff ff67 	bl	80001e0 <enable_peripheral_clocks>
	BL enable_uart5
 8000312:	f7ff ff7b 	bl	800020c <enable_uart5>
	BL initialise_discovery_board
 8000316:	f7ff ff74 	bl	8000202 <initialise_discovery_board>
	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 800031a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	@ Then, counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1), which is 8MHz/(7+1)=1MHz
	MOV R1, #0x7 @ with delay period 1 microsecond
 800031e:	f04f 0107 	mov.w	r1, #7
	STR R1, [R0, TIM_PSC] @ set the prescaler register
 8000322:	6281      	str	r1, [r0, #40]	@ 0x28

	@ see the notes in the trigger_prescaler function
	BL trigger_prescaler
 8000324:	f7ff ff62 	bl	80001ec <trigger_prescaler>

	@ start the counter and auto-reload running
	LDR R0, =TIM2	@ load the base address for the timer
 8000328:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, [R0, #TIM_CR1]  @ load the current value of the control registers
 800032c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << 7 | 1 << 0 @ 7st bit is enable Auto-reload preload, 0 is enable Counter
 800032e:	f041 0181 	orr.w	r1, r1, #129	@ 0x81
	STR R1, [R0, #TIM_CR1] @ enable the counter and Auto-reload preload
 8000332:	6001      	str	r1, [r0, #0]

	@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and terminating character
	LDR R1, =incoming_buffer
 8000334:	4931      	ldr	r1, [pc, #196]	@ (80003fc <loop_forever_reset+0x1e>)
	LDR R2, =user_defined_terminating_character
 8000336:	4a32      	ldr	r2, [pc, #200]	@ (8000400 <loop_forever_reset+0x22>)

	@ dereference the terminating character, store it in R2
	LDRB R2, [R2]
 8000338:	7812      	ldrb	r2, [r2, #0]

	@ Keep a pointer that counts how many bytes have been received
	MOV R3, #0x00
 800033a:	f04f 0300 	mov.w	r3, #0

0800033e <loop_forever>:


@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer)
loop_forever:

	LDR R4, =UART5 @ the base address for the register to set up UART
 800033e:	4c2e      	ldr	r4, [pc, #184]	@ (80003f8 <loop_forever_reset+0x1a>)
	LDR R5, [R4, USART_ISR] @ load the status of the UART
 8000340:	69e5      	ldr	r5, [r4, #28]

	TST R5, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 8000342:	f015 0f0a 	tst.w	r5, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 8000346:	d112      	bne.n	800036e <clear_error>

	TST R5, 1 << UART_RXNE @ check if there was a character to read
 8000348:	f015 0f20 	tst.w	r5, #32
	BEQ loop_forever @ loop back if there was no character to read
 800034c:	d0f7      	beq.n	800033e <loop_forever>

	LDRB R6, [R4, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 800034e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24

	CMP R2, R6 @ check that the termination character has been reached
 8000352:	42b2      	cmp	r2, r6
	BNE no_reset
 8000354:	d103      	bne.n	800035e <no_reset>

	B cipher_main @decipher the string
 8000356:	e7b1      	b.n	80002bc <cipher_main>

08000358 <LED_pre>:

LED_pre:
	LDR R4, =USART1 @ the base address for the register to set up UART
 8000358:	4c2a      	ldr	r4, [pc, #168]	@ (8000404 <loop_forever_reset+0x26>)

	STRB R2, [R1, R3] @Re-add the terminating character (the recieving loop removes it)
 800035a:	54ca      	strb	r2, [r1, r3]
	B String_checking @Begin flashing
 800035c:	e00c      	b.n	8000378 <String_checking>

0800035e <no_reset>:

@ When not at termination character, resetting the status of the UART
no_reset:

	STRB R6, [R1, R3]
 800035e:	54ce      	strb	r6, [r1, r3]
	ADD R3, #1
 8000360:	f103 0301 	add.w	r3, r3, #1

	@ load the status of the UART
	LDR R5, [R4, USART_RQR]
 8000364:	69a5      	ldr	r5, [r4, #24]
	ORR R5, 1 << UART_RXFRQ
 8000366:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R4, USART_RQR]
 800036a:	61a5      	str	r5, [r4, #24]

	BGT loop_forever
 800036c:	dce7      	bgt.n	800033e <loop_forever>

0800036e <clear_error>:

@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
clear_error:

	LDR R5, [R4, USART_ICR] @ loading the UART clear flag section
 800036e:	6a25      	ldr	r5, [r4, #32]
	ORR R5, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
 8000370:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R4, USART_ICR] @ storing the cleared flags in the clear flag section
 8000374:	6225      	str	r5, [r4, #32]
	B loop_forever
 8000376:	e7e2      	b.n	800033e <loop_forever>

08000378 <String_checking>:

@ Gets the character from the alphabet, initialise various paramters
String_checking:

	@Load string to R11
	MOV R11, R1
 8000378:	468b      	mov	fp, r1
	@Load checking list to R5 (the STM will flash based on every character which matches the checking list)
	LDR R5, =checking_list
 800037a:	4d23      	ldr	r5, [pc, #140]	@ (8000408 <loop_forever_reset+0x2a>)
	@initialize the num counter
	LDR R7, =0x00
 800037c:	f04f 0700 	mov.w	r7, #0
	@ Initialize the bitmask
	LDR R4, =0b00000000
 8000380:	f04f 0400 	mov.w	r4, #0

	B loop_through_the_checking_list
 8000384:	e7ff      	b.n	8000386 <loop_through_the_checking_list>

08000386 <loop_through_the_checking_list>:

@ Compares the alphabet character to each element in the string, creating a tally of matches
loop_through_the_checking_list:

	LDRB R3, [R5], #1 @load the current character from the checking list
 8000386:	f815 3b01 	ldrb.w	r3, [r5], #1
	CMP R3, #0 @check if the null terminating character has been reached
 800038a:	2b00      	cmp	r3, #0
    BEQ finish_scanning @ if R1 equal 0x00, which means the string is end. Turn all LED on
 800038c:	d016      	beq.n	80003bc <finish_scanning>
    B set_led @Search the input string for instances of the current character of interest.
 800038e:	e7ff      	b.n	8000390 <set_led>

08000390 <set_led>:

@ set the number of LEDs as the number of times the letter is appears
set_led:

	BL loop_through_the_string @Count the number of instances of the character in the string.
 8000390:	f000 f80c 	bl	80003ac <loop_through_the_string>
	@ initialize R3 to 1，R3 will be used in bitmask_set branch
	MOV R3,#1
 8000394:	f04f 0301 	mov.w	r3, #1
	BL bitmask_set
 8000398:	f000 f815 	bl	80003c6 <bitmask_set>
	LDR R0, =GPIOE @ load the address of the GPIOE register into R0
 800039c:	4814      	ldr	r0, [pc, #80]	@ (80003f0 <loop_forever_reset+0x12>)
	STRB R4, [R0, #ODR + 1] @ store this to the second byte of the ODR (bits 8-15)
 800039e:	7544      	strb	r4, [r0, #21]

	BL delay_loop @ wait 500ms (function in initialise)
 80003a0:	f7ff ff80 	bl	80002a4 <delay_loop>
	@ reset the bitmask
	LDR R4, =0b00000000
 80003a4:	f04f 0400 	mov.w	r4, #0
	@Load string to R11
	MOV R11, R1
 80003a8:	468b      	mov	fp, r1
	B loop_through_the_checking_list
 80003aa:	e7ec      	b.n	8000386 <loop_through_the_checking_list>

080003ac <loop_through_the_string>:

@ Loads the character from the string
loop_through_the_string:

	LDRB R8, [R11], #1 @load the current character of the string
 80003ac:	f81b 8b01 	ldrb.w	r8, [fp], #1

    CMP R8, R2 @Check for the null terminating character.
 80003b0:	4590      	cmp	r8, r2
    BEQ Back @If the null terminating character has been reached, the search is complete. Return to the display LED function.
 80003b2:	d002      	beq.n	80003ba <Back>

    CMP R8,R3 @Check if the current character matches the character of interest.
 80003b4:	4598      	cmp	r8, r3
    BEQ	num_count @If so, increment the counter.
 80003b6:	d00f      	beq.n	80003d8 <num_count>

    B loop_through_the_string
 80003b8:	e7f8      	b.n	80003ac <loop_through_the_string>

080003ba <Back>:

@ this branch is use to turn back LP saving address after meet the requirement
Back:
	BX LR
 80003ba:	4770      	bx	lr

080003bc <finish_scanning>:

@ Lights up all LEDs to signifiy string checking has been completed.
finish_scanning:

	LDR R4, =0B11111111
 80003bc:	f04f 04ff 	mov.w	r4, #255	@ 0xff
	LDR R0, =GPIOE @ load the address of the GPIOE register into R0
 80003c0:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <loop_forever_reset+0x12>)
	STRB R4, [R0, #ODR + 1] @ store this to the second byte of the ODR (bits 8-15)
 80003c2:	7544      	strb	r4, [r0, #21]

	B loop_forever_reset
 80003c4:	e00b      	b.n	80003de <loop_forever_reset>

080003c6 <bitmask_set>:

@ sit the LED bitmask according to the number of times the letter is appears
bitmask_set:

	CMP R7, #0 @ Check R3 equal 0 or not
 80003c6:	2f00      	cmp	r7, #0
    BEQ Back @ if R3 is 0，bitmask done
 80003c8:	d0f7      	beq.n	80003ba <Back>

    ORR R4, R4, R3 @ Set the lowest bit to 1 if not all LEDs are on
 80003ca:	ea44 0403 	orr.w	r4, r4, r3
    LSL R3, R3, #1 @ Shift left to turn on the next LED
 80003ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
    SUB R7, #1 @ num counter minus one when led bitmask set 1
 80003d2:	f1a7 0701 	sub.w	r7, r7, #1

    B bitmask_set @ loop again
 80003d6:	e7f6      	b.n	80003c6 <bitmask_set>

080003d8 <num_count>:

@count when the letter is appears
num_count:

	ADD R7, #1
 80003d8:	f107 0701 	add.w	r7, r7, #1
	B loop_through_the_string @ go back to loop_through_the_string after count
 80003dc:	e7e6      	b.n	80003ac <loop_through_the_string>

080003de <loop_forever_reset>:

@ Resets the buffers to allow for process to start again
loop_forever_reset:

	LDR R1, =incoming_buffer
 80003de:	4907      	ldr	r1, [pc, #28]	@ (80003fc <loop_forever_reset+0x1e>)
	MOV R3, #0x00
 80003e0:	f04f 0300 	mov.w	r3, #0

	B loop_forever
 80003e4:	e7ab      	b.n	800033e <loop_forever>
 80003e6:	0000      	.short	0x0000
	LDR R0, =RCC	@ load the base address for the timer
 80003e8:	40021000 	.word	0x40021000
	LDR R1, =500000 @ make the timer overflow after counting to 500000
 80003ec:	0007a120 	.word	0x0007a120
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80003f0:	48001000 	.word	0x48001000
	LDR R0, =GPIOD
 80003f4:	48000c00 	.word	0x48000c00
	LDR R0, =UART5 @ the base address for the register to turn clocks on/off
 80003f8:	40005000 	.word	0x40005000
	LDR R1, =incoming_buffer
 80003fc:	20000000 	.word	0x20000000
	LDR R2, =user_defined_terminating_character
 8000400:	2000003e 	.word	0x2000003e
	LDR R4, =USART1 @ the base address for the register to set up UART
 8000404:	40013800 	.word	0x40013800
	LDR R5, =checking_list
 8000408:	20000040 	.word	0x20000040

0800040c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800040c:	480d      	ldr	r0, [pc, #52]	@ (8000444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000410:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000414:	480c      	ldr	r0, [pc, #48]	@ (8000448 <LoopForever+0x6>)
  ldr r1, =_edata
 8000416:	490d      	ldr	r1, [pc, #52]	@ (800044c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000418:	4a0d      	ldr	r2, [pc, #52]	@ (8000450 <LoopForever+0xe>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800041c:	e002      	b.n	8000424 <LoopCopyDataInit>

0800041e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000422:	3304      	adds	r3, #4

08000424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000428:	d3f9      	bcc.n	800041e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042a:	4a0a      	ldr	r2, [pc, #40]	@ (8000454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800042c:	4c0a      	ldr	r4, [pc, #40]	@ (8000458 <LoopForever+0x16>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000430:	e001      	b.n	8000436 <LoopFillZerobss>

08000432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000434:	3204      	adds	r2, #4

08000436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000438:	d3fb      	bcc.n	8000432 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800043a:	f000 f811 	bl	8000460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043e:	f7ff ff62 	bl	8000306 <main>

08000442 <LoopForever>:

LoopForever:
  b LoopForever
 8000442:	e7fe      	b.n	8000442 <LoopForever>
  ldr   r0, =_estack
 8000444:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800044c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000450:	080004c8 	.word	0x080004c8
  ldr r2, =_sbss
 8000454:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000458:	20000064 	.word	0x20000064

0800045c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800045c:	e7fe      	b.n	800045c <ADC1_2_IRQHandler>
	...

08000460 <__libc_init_array>:
 8000460:	b570      	push	{r4, r5, r6, lr}
 8000462:	4d0d      	ldr	r5, [pc, #52]	@ (8000498 <__libc_init_array+0x38>)
 8000464:	4c0d      	ldr	r4, [pc, #52]	@ (800049c <__libc_init_array+0x3c>)
 8000466:	1b64      	subs	r4, r4, r5
 8000468:	10a4      	asrs	r4, r4, #2
 800046a:	2600      	movs	r6, #0
 800046c:	42a6      	cmp	r6, r4
 800046e:	d109      	bne.n	8000484 <__libc_init_array+0x24>
 8000470:	4d0b      	ldr	r5, [pc, #44]	@ (80004a0 <__libc_init_array+0x40>)
 8000472:	4c0c      	ldr	r4, [pc, #48]	@ (80004a4 <__libc_init_array+0x44>)
 8000474:	f000 f818 	bl	80004a8 <_init>
 8000478:	1b64      	subs	r4, r4, r5
 800047a:	10a4      	asrs	r4, r4, #2
 800047c:	2600      	movs	r6, #0
 800047e:	42a6      	cmp	r6, r4
 8000480:	d105      	bne.n	800048e <__libc_init_array+0x2e>
 8000482:	bd70      	pop	{r4, r5, r6, pc}
 8000484:	f855 3b04 	ldr.w	r3, [r5], #4
 8000488:	4798      	blx	r3
 800048a:	3601      	adds	r6, #1
 800048c:	e7ee      	b.n	800046c <__libc_init_array+0xc>
 800048e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000492:	4798      	blx	r3
 8000494:	3601      	adds	r6, #1
 8000496:	e7f2      	b.n	800047e <__libc_init_array+0x1e>
 8000498:	080004c0 	.word	0x080004c0
 800049c:	080004c0 	.word	0x080004c0
 80004a0:	080004c0 	.word	0x080004c0
 80004a4:	080004c4 	.word	0x080004c4

080004a8 <_init>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	bf00      	nop
 80004ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ae:	bc08      	pop	{r3}
 80004b0:	469e      	mov	lr, r3
 80004b2:	4770      	bx	lr

080004b4 <_fini>:
 80004b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b6:	bf00      	nop
 80004b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ba:	bc08      	pop	{r3}
 80004bc:	469e      	mov	lr, r3
 80004be:	4770      	bx	lr
