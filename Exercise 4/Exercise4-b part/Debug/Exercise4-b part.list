
Exercise4-b part.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000019c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010338  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010368  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000010d  00000000  00000000  000103ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000090  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00010548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  00010590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000105b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00000091  00000000  00000000  00010600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00010691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  000106ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000318 	.word	0x08000318

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000318 	.word	0x08000318

080001d4 <enable_timer2_clock>:
.text
@ define code

enable_timer2_clock:

	LDR R0, =RCC	@ load the base address for the timer
 80001d4:	4827      	ldr	r0, [pc, #156]	; (8000274 <LED_off_loop+0x10>)
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] @ enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]
	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:


@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80001e0:	4824      	ldr	r0, [pc, #144]	; (8000274 <LED_off_loop+0x10>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 80001e4:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 80001e8:	6141      	str	r1, [r0, #20]
	BX LR @ return
 80001ea:	4770      	bx	lr

080001ec <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001ec:	4822      	ldr	r0, [pc, #136]	; (8000278 <LED_off_loop+0x14>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001f4:	4770      	bx	lr

080001f6 <trigger_prescaler>:

	@ In your code, you should be using the ARR register to
	@ set the maximum count for the timer

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

	LDR R1, =0x1 @ make the timer overflow after counting to only 1
 80001fa:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_ARR] @ set the ARR register
 80001fe:	62c1      	str	r1, [r0, #44]	; 0x2c

	LDR R8, =0x00
 8000200:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT] @ reset the clock
 8000204:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
	NOP
 8000208:	bf00      	nop
	NOP
 800020a:	bf00      	nop

	LDR R1, =0xffffffff @ set the ARR back to the default value
 800020c:	f04f 31ff 	mov.w	r1, #4294967295
	STR R1, [R0, TIM_ARR] @ set the ARR register
 8000210:	62c1      	str	r1, [r0, #44]	; 0x2c

	BX LR
 8000212:	4770      	bx	lr

08000214 <delay_loop>:


delay_loop:
	LDR R0, =TIM2  @ load the address of the timer 2 base address
 8000214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R2, [R0, TIM_CNT]	@ read current time
 8000218:	6a42      	ldr	r2, [r0, #36]	; 0x24

	@ compare current time to R1
	CMP R2, R1
 800021a:	428a      	cmp	r2, r1
	BGT reset_counter
 800021c:	dc00      	bgt.n	8000220 <reset_counter>
	B delay_loop
 800021e:	e7f9      	b.n	8000214 <delay_loop>

08000220 <reset_counter>:

@ reset the counter
reset_counter:
	LDR R0, =TIM2
 8000220:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R8, =0x00
 8000224:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT]
 8000228:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
	BX LR
 800022c:	4770      	bx	lr

0800022e <main>:


@ this is the entry function called from the startup file
main:

	BL enable_timer2_clock
 800022e:	f7ff ffd1 	bl	80001d4 <enable_timer2_clock>
	BL enable_peripheral_clocks
 8000232:	f7ff ffd5 	bl	80001e0 <enable_peripheral_clocks>
	BL initialise_discovery_board
 8000236:	f7ff ffd9 	bl	80001ec <initialise_discovery_board>

	@ start the counter running
	LDR R0, =TIM2	@ load the base address for the timer
 800023a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	MOV R1, #0b1 @ store a 1 in bit zero for the CEN flag
 800023e:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_CR1] @ enable the counter(8MHz)
 8000242:	6001      	str	r1, [r0, #0]

	@ store a value for the prescaler
	LDR R0, =TIM2	@ load the base address for the timer
 8000244:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	@ Then, counter clock frequency CK_CNT is equal to fCK_PSC / (PSC[15:0] + 1), which is 8MHz/(799+1)=10kHz
	MOV R1, #0x31f @ 799, set prescaler with 0.1 ms delay period
 8000248:	f240 311f 	movw	r1, #799	; 0x31f
	STR R1, [R0, TIM_PSC] @ set the prescaler register
 800024c:	6281      	str	r1, [r0, #40]	; 0x28

	@ see the notes in the trigger_prescaler function
	BL trigger_prescaler
 800024e:	f7ff ffd2 	bl	80001f6 <trigger_prescaler>

	@ Set the delay time with unit microseconds and store in R1(10000=1s delay;36000000= 1 hour delay)
	@ 1 microsecond delay: set prescaler to 7 and LDR R1 = 1
	LDR R1, =10000
 8000252:	f242 7110 	movw	r1, #10000	; 0x2710

08000256 <LED_on_loop>:

LED_on_loop:
	LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 8000256:	4808      	ldr	r0, [pc, #32]	; (8000278 <LED_off_loop+0x14>)
	@ store the current light pattern (binary mask) in R7
	LDR R7, =0b01010101 @ load a pattern for the set of LEDs (every second one is on)
 8000258:	f04f 0755 	mov.w	r7, #85	; 0x55
	STRB R7, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 800025c:	7547      	strb	r7, [r0, #21]
	BL delay_loop
 800025e:	f7ff ffd9 	bl	8000214 <delay_loop>
	B LED_off_loop
 8000262:	e7ff      	b.n	8000264 <LED_off_loop>

08000264 <LED_off_loop>:

LED_off_loop:
	LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 8000264:	4804      	ldr	r0, [pc, #16]	; (8000278 <LED_off_loop+0x14>)
	@ store the current light pattern (binary mask) in R7
	LDR R7, =0b00000000 @ load a pattern for the set of LEDs (every second one is on)
 8000266:	f04f 0700 	mov.w	r7, #0
	STRB R7, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 800026a:	7547      	strb	r7, [r0, #21]
	BL delay_loop
 800026c:	f7ff ffd2 	bl	8000214 <delay_loop>
	B LED_on_loop
 8000270:	e7f1      	b.n	8000256 <LED_on_loop>
 8000272:	0000      	.short	0x0000
	LDR R0, =RCC	@ load the base address for the timer
 8000274:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000278:	48001000 	.word	0x48001000

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ffbe 	bl	800022e <main>

080002b2 <LoopForever>:

LoopForever:
  b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000338 	.word	0x08000338
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	4d0d      	ldr	r5, [pc, #52]	; (8000308 <__libc_init_array+0x38>)
 80002d4:	4c0d      	ldr	r4, [pc, #52]	; (800030c <__libc_init_array+0x3c>)
 80002d6:	1b64      	subs	r4, r4, r5
 80002d8:	10a4      	asrs	r4, r4, #2
 80002da:	2600      	movs	r6, #0
 80002dc:	42a6      	cmp	r6, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	4d0b      	ldr	r5, [pc, #44]	; (8000310 <__libc_init_array+0x40>)
 80002e2:	4c0c      	ldr	r4, [pc, #48]	; (8000314 <__libc_init_array+0x44>)
 80002e4:	f000 f818 	bl	8000318 <_init>
 80002e8:	1b64      	subs	r4, r4, r5
 80002ea:	10a4      	asrs	r4, r4, #2
 80002ec:	2600      	movs	r6, #0
 80002ee:	42a6      	cmp	r6, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f8:	4798      	blx	r3
 80002fa:	3601      	adds	r6, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000302:	4798      	blx	r3
 8000304:	3601      	adds	r6, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
