
Exercise 3-a part.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000358  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000358  08000358  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000358  08000358  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000001c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000129  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000000d2  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  00020276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  000202e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000000d3  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  00020403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  0002041c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000340 	.word	0x08000340

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000340 	.word	0x08000340

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	482c      	ldr	r0, [pc, #176]	; (8000288 <delay_inner+0x8>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:

@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	482a      	ldr	r0, [pc, #168]	; (800028c <delay_inner+0xc>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_uart>:
enable_uart:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001ea:	4829      	ldr	r0, [pc, #164]	; (8000290 <delay_inner+0x10>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001ec:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001f0:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001f4:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001f6:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001fa:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001fc:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001fe:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000202:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000204:	4820      	ldr	r0, [pc, #128]	; (8000288 <delay_inner+0x8>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000206:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 8000208:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 800020c:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800020e:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000212:	4820      	ldr	r0, [pc, #128]	; (8000294 <delay_inner+0x14>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000214:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 8000216:	481f      	ldr	r0, [pc, #124]	; (8000294 <delay_inner+0x14>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000218:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800021a:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800021e:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000220:	4770      	bx	lr

08000222 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000222:	4819      	ldr	r0, [pc, #100]	; (8000288 <delay_inner+0x8>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000224:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000226:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 800022a:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800022c:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800022e:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000232:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000234:	4770      	bx	lr

08000236 <main>:


@ this is the entry function called from the c file
main:

	BL initialise_power
 8000236:	f7ff fff4 	bl	8000222 <initialise_power>
	BL enable_peripheral_clocks
 800023a:	f7ff ffcb 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board
 800023e:	f7ff ffcf 	bl	80001e0 <initialise_discovery_board>
	BL enable_uart
 8000242:	f7ff ffd2 	bl	80001ea <enable_uart>

	B waiting_for_press @ wating for button pressing
 8000246:	e7ff      	b.n	8000248 <waiting_for_press>

08000248 <waiting_for_press>:

@ Button press waiting loop
waiting_for_press:

	LDR R0, =GPIOA
 8000248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	LDR R1, [R0, IDR]
 800024c:	6901      	ldr	r1, [r0, #16]
	TST R1, button @ PA0 is bit 0, so test for equal to this
 800024e:	f011 0f01 	tst.w	r1, #1
	BEQ waiting_for_press @ loop while TST returns 0
 8000252:	d0f9      	beq.n	8000248 <waiting_for_press>

	B tx_loop
 8000254:	e7ff      	b.n	8000256 <tx_loop>

08000256 <tx_loop>:

@ Loads the string into the transmission buffer
tx_loop:

	LDR R0, =UART @ the base address for the register to set up UART
 8000256:	480f      	ldr	r0, [pc, #60]	; (8000294 <delay_inner+0x14>)

	@ load the memory addresses of the buffer and length information
	LDR R1, =tx_string
 8000258:	490f      	ldr	r1, [pc, #60]	; (8000298 <delay_inner+0x18>)
	LDR R6, =user_definied_terminating_character
 800025a:	4e10      	ldr	r6, [pc, #64]	; (800029c <delay_inner+0x1c>)

0800025c <tx_uart>:

@ Transmitting the characters of the buffer to the console
tx_uart:

	LDR R2, [R0, USART_ISR] @ load the status of the UART
 800025c:	69c2      	ldr	r2, [r0, #28]
	ANDS R2, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
 800025e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart
 8000262:	d0fb      	beq.n	800025c <tx_uart>

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R5, [R1], #1
 8000264:	f811 5b01 	ldrb.w	r5, [r1], #1
	@ check NULL termination character
	CMP R5, 0x00
 8000268:	2d00      	cmp	r5, #0
	BEQ go_to_waiting_for_press @ end transmit and wating for next trans
 800026a:	d002      	beq.n	8000272 <go_to_waiting_for_press>

	STRB R5, [R0, USART_TDR] @ puts character into console
 800026c:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28

	@ loop back to the start
	B tx_uart
 8000270:	e7f4      	b.n	800025c <tx_uart>

08000272 <go_to_waiting_for_press>:

@ load the next value in the string into the transmit buffer for the specified UART
go_to_waiting_for_press:

	STRB R6, [R0, USART_TDR]
 8000272:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
	BL delay_loop
 8000276:	f000 f801 	bl	800027c <delay_loop>
	B waiting_for_press
 800027a:	e7e5      	b.n	8000248 <waiting_for_press>

0800027c <delay_loop>:

@ Simple delay loop
delay_loop:
	LDR R9, =0xfffff
 800027c:	f8df 9020 	ldr.w	r9, [pc, #32]	; 80002a0 <delay_inner+0x20>

08000280 <delay_inner>:

@ delay loop
delay_inner:
	@ notice the SUB has an S on the end, this means it alters the condition register
	@ and can be used to make a branching decision.
	SUBS R9, #1
 8000280:	f1b9 0901 	subs.w	r9, r9, #1
	BGT delay_inner
 8000284:	dcfc      	bgt.n	8000280 <delay_inner>
	BX LR @ return from function call
 8000286:	4770      	bx	lr
	LDR R0, =RCC
 8000288:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800028c:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 8000290:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000294:	40013800 	.word	0x40013800
	LDR R1, =tx_string
 8000298:	20000000 	.word	0x20000000
	LDR R6, =user_definied_terminating_character
 800029c:	20000004 	.word	0x20000004
	LDR R9, =0xfffff
 80002a0:	000fffff 	.word	0x000fffff

080002a4 <Reset_Handler>:
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
 80002a6:	4685      	mov	sp, r0
 80002a8:	f3af 8000 	nop.w
 80002ac:	480c      	ldr	r0, [pc, #48]	; (80002e0 <LoopForever+0x6>)
 80002ae:	490d      	ldr	r1, [pc, #52]	; (80002e4 <LoopForever+0xa>)
 80002b0:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <LoopForever+0xe>)
 80002b2:	2300      	movs	r3, #0
 80002b4:	e002      	b.n	80002bc <LoopCopyDataInit>

080002b6 <CopyDataInit>:
 80002b6:	58d4      	ldr	r4, [r2, r3]
 80002b8:	50c4      	str	r4, [r0, r3]
 80002ba:	3304      	adds	r3, #4

080002bc <LoopCopyDataInit>:
 80002bc:	18c4      	adds	r4, r0, r3
 80002be:	428c      	cmp	r4, r1
 80002c0:	d3f9      	bcc.n	80002b6 <CopyDataInit>
 80002c2:	4a0a      	ldr	r2, [pc, #40]	; (80002ec <LoopForever+0x12>)
 80002c4:	4c0a      	ldr	r4, [pc, #40]	; (80002f0 <LoopForever+0x16>)
 80002c6:	2300      	movs	r3, #0
 80002c8:	e001      	b.n	80002ce <LoopFillZerobss>

080002ca <FillZerobss>:
 80002ca:	6013      	str	r3, [r2, #0]
 80002cc:	3204      	adds	r2, #4

080002ce <LoopFillZerobss>:
 80002ce:	42a2      	cmp	r2, r4
 80002d0:	d3fb      	bcc.n	80002ca <FillZerobss>
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
 80002d6:	f7ff ffae 	bl	8000236 <main>

080002da <LoopForever>:
 80002da:	e7fe      	b.n	80002da <LoopForever>
 80002dc:	2000a000 	.word	0x2000a000
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000008 	.word	0x20000008
 80002e8:	08000360 	.word	0x08000360
 80002ec:	20000008 	.word	0x20000008
 80002f0:	20000024 	.word	0x20000024

080002f4 <ADC1_2_IRQHandler>:
 80002f4:	e7fe      	b.n	80002f4 <ADC1_2_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4d0d      	ldr	r5, [pc, #52]	; (8000330 <__libc_init_array+0x38>)
 80002fc:	4c0d      	ldr	r4, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	2600      	movs	r6, #0
 8000304:	42a6      	cmp	r6, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	4d0b      	ldr	r5, [pc, #44]	; (8000338 <__libc_init_array+0x40>)
 800030a:	4c0c      	ldr	r4, [pc, #48]	; (800033c <__libc_init_array+0x44>)
 800030c:	f000 f818 	bl	8000340 <_init>
 8000310:	1b64      	subs	r4, r4, r5
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	2600      	movs	r6, #0
 8000316:	42a6      	cmp	r6, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000320:	4798      	blx	r3
 8000322:	3601      	adds	r6, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f855 3b04 	ldr.w	r3, [r5], #4
 800032a:	4798      	blx	r3
 800032c:	3601      	adds	r6, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000358 	.word	0x08000358
 8000334:	08000358 	.word	0x08000358
 8000338:	08000358 	.word	0x08000358
 800033c:	0800035c 	.word	0x0800035c

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
