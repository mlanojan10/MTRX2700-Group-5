
Exercise3-et part.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  0800040c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  0800040c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 14 .debug_line   00000170  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000008c  00000000  00000000  00020223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00000048  00000000  00000000  000202af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00000026  00000000  00000000  000202f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000048  00000000  00000000  00020320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000008d  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000019  00000000  00000000  000203f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000002c  00000000  00000000  00020410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f4 	.word	0x080003f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	080003f4 	.word	0x080003f4

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4858      	ldr	r0, [pc, #352]	; (8000338 <loop_forever_reset+0x8>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	; 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:
@ function to enable a UART device - this requires:
@  setting the alternate pin functions for the UART (select the pins you want to use)
@
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4856      	ldr	r0, [pc, #344]	; (800033c <loop_forever_reset+0xc>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_usart1>:
enable_usart1:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001ea:	4855      	ldr	r0, [pc, #340]	; (8000340 <loop_forever_reset+0x10>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001ec:	f04f 0177 	mov.w	r1, #119	; 0x77
	STRB R1, [R0, AFRL + 2]
 80001f0:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001f4:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001f6:	f441 6120 	orr.w	r1, r1, #2560	; 0xa00
	STR R1, [R0, GPIO_MODER]
 80001fa:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001fc:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001fe:	f441 6170 	orr.w	r1, r1, #3840	; 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000202:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000204:	484c      	ldr	r0, [pc, #304]	; (8000338 <loop_forever_reset+0x8>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000206:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << USART1_EN  @ apply the bit mask to the previous values of the enable the UART
 8000208:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 800020c:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800020e:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =USART1 @ the base address for the register to turn clocks on/off
 8000212:	484c      	ldr	r0, [pc, #304]	; (8000344 <loop_forever_reset+0x14>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000214:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =USART1 @ the base address for the register to set up the specified UART
 8000216:	484b      	ldr	r0, [pc, #300]	; (8000344 <loop_forever_reset+0x14>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000218:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800021a:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800021e:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000220:	4770      	bx	lr

08000222 <enable_uart4>:
enable_uart4:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 8000222:	4847      	ldr	r0, [pc, #284]	; (8000340 <loop_forever_reset+0x10>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x55
 8000224:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1] @Should this be?
 8000228:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 800022c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00000 @ Mask for pins to change to 'alternate function mode'
 800022e:	f441 0120 	orr.w	r1, r1, #10485760	; 0xa00000
	STR R1, [R0, GPIO_MODER]
 8000232:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 8000234:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00000 @ Mask for pins to be set as high speed
 8000236:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
	STR R1, [R0, GPIO_OSPEEDR]
 800023a:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800023c:	483e      	ldr	r0, [pc, #248]	; (8000338 <loop_forever_reset+0x8>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 800023e:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4_EN  @ apply the bit mask to the previous values of the enable the UART
 8000240:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 8000244:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000246:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 800024a:	483f      	ldr	r0, [pc, #252]	; (8000348 <loop_forever_reset+0x18>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800024c:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART4 @ the base address for the register to set up the specified UART
 800024e:	483e      	ldr	r0, [pc, #248]	; (8000348 <loop_forever_reset+0x18>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000250:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000252:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000256:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000258:	4770      	bx	lr

0800025a <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800025a:	4837      	ldr	r0, [pc, #220]	; (8000338 <loop_forever_reset+0x8>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800025c:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 800025e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000262:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000266:	6001      	str	r1, [r0, #0]

08000268 <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000268:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 800026a:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 800026e:	d0fb      	beq.n	8000268 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 8000270:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 8000272:	f44f 02a2 	mov.w	r2, #5308416	; 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000276:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 800027a:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800027c:	482e      	ldr	r0, [pc, #184]	; (8000338 <loop_forever_reset+0x8>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800027e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 8000280:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000284:	6001      	str	r1, [r0, #0]

08000286 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000286:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000288:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 800028c:	d0fb      	beq.n	8000286 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800028e:	482a      	ldr	r0, [pc, #168]	; (8000338 <loop_forever_reset+0x8>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000290:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000292:	f240 4202 	movw	r2, #1026	; 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000296:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 800029a:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800029c:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 800029e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 80002a2:	6041      	str	r1, [r0, #4]

	BX LR @ return
 80002a4:	4770      	bx	lr

080002a6 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002a6:	4824      	ldr	r0, [pc, #144]	; (8000338 <loop_forever_reset+0x8>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 80002a8:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 80002aa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR]
 80002ae:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 80002b0:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 80002b2:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 80002b6:	6181      	str	r1, [r0, #24]

	BX LR @ return
 80002b8:	4770      	bx	lr

080002ba <main>:


@ this is the entry function called from the c file
main:

	BL initialise_power
 80002ba:	f7ff fff4 	bl	80002a6 <initialise_power>
	BL enable_peripheral_clocks
 80002be:	f7ff ff89 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board
 80002c2:	f7ff ff8d 	bl	80001e0 <initialise_discovery_board>
	BL enable_usart1
 80002c6:	f7ff ff90 	bl	80001ea <enable_usart1>
	BL enable_uart4
 80002ca:	f7ff ffaa 	bl	8000222 <enable_uart4>



	@ To read in data, we need to use a memory buffer to store the incoming bytes
	@ Get pointers to the buffer and terminating character
	LDR R1, =incoming_buffer
 80002ce:	491f      	ldr	r1, [pc, #124]	; (800034c <loop_forever_reset+0x1c>)
	LDR R2, =user_defined_terminating_character
 80002d0:	4a1f      	ldr	r2, [pc, #124]	; (8000350 <loop_forever_reset+0x20>)

	@ dereference the terminating character, store it in R2
	LDRB R2, [R2]
 80002d2:	7812      	ldrb	r2, [r2, #0]

	@ Keep a pointer that counts how many bytes have been received
	MOV R3, #0x00
 80002d4:	f04f 0300 	mov.w	r3, #0

080002d8 <loop_forever>:


@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer)
loop_forever:

	LDR R0, =UART4 @ the base address for the register to set up UART
 80002d8:	481b      	ldr	r0, [pc, #108]	; (8000348 <loop_forever_reset+0x18>)

	LDR R4, =USART1 @ the base address for the register to set up UART
 80002da:	4c1a      	ldr	r4, [pc, #104]	; (8000344 <loop_forever_reset+0x14>)
	LDR R5, [R4, USART_ISR] @ load the status of the UART
 80002dc:	69e5      	ldr	r5, [r4, #28]

	TST R5, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 80002de:	f015 0f0a 	tst.w	r5, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 80002e2:	d10f      	bne.n	8000304 <clear_error>

	TST R5, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 80002e4:	f015 0f20 	tst.w	r5, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ loop_forever @ loop back if there was no character to read
 80002e8:	d0f6      	beq.n	80002d8 <loop_forever>

	LDRB R6, [R4, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 80002ea:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24

	STRB R6, [R1, R3]
 80002ee:	54ce      	strb	r6, [r1, r3]
	ADD R3, #1
 80002f0:	f103 0301 	add.w	r3, r3, #1

	CMP R2, R6
 80002f4:	42b2      	cmp	r2, r6
	BNE no_reset
 80002f6:	d100      	bne.n	80002fa <no_reset>

	B tx_uart
 80002f8:	e009      	b.n	800030e <tx_uart>

080002fa <no_reset>:

no_reset:


	@ load the status of the UART
	LDR R5, [R4, USART_RQR]
 80002fa:	69a5      	ldr	r5, [r4, #24]
	ORR R5, 1 << UART_RXFRQ
 80002fc:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R4, USART_RQR]
 8000300:	61a5      	str	r5, [r4, #24]

	BGT loop_forever
 8000302:	dce9      	bgt.n	80002d8 <loop_forever>

08000304 <clear_error>:


clear_error:

	@ Clear the overrun/frame error flag in the register USART_ICR (see page 897)
	LDR R5, [R4, USART_ICR]
 8000304:	6a25      	ldr	r5, [r4, #32]
	ORR R5, 1 << UART_ORECF | 1 << UART_FECF @ clear the flags (by setting flags to 1)
 8000306:	f045 0508 	orr.w	r5, r5, #8
	STR R5, [R4, USART_ICR]
 800030a:	6225      	str	r5, [r4, #32]
	B loop_forever
 800030c:	e7e4      	b.n	80002d8 <loop_forever>

0800030e <tx_uart>:


tx_uart:

	LDR R5, [R0, USART_ISR] @ load the status of the UART
 800030e:	69c5      	ldr	r5, [r0, #28]
	ANDS R5, 1 << UART_TXE  @ 'AND' the current status with the bit mask that we are interested in
 8000310:	f015 0580 	ands.w	r5, r5, #128	; 0x80
						    @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	@ loop back to check status again if the flag indicates there is no byte waiting
	BEQ tx_uart
 8000314:	d0fb      	beq.n	800030e <tx_uart>

	@ load the next value in the string into the transmit buffer for the specified UART
	LDRB R7, [R1], #1
 8000316:	f811 7b01 	ldrb.w	r7, [r1], #1
	STRB R7, [R0, USART_TDR] @Shifts to the next byte
 800031a:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28

	@ check terminating pointer
	CMP R7, R2
 800031e:	4297      	cmp	r7, r2
	BEQ loop_forever_reset @ end transmit and wating for next trans
 8000320:	d006      	beq.n	8000330 <loop_forever_reset>

	@ loop back to the start
	B tx_uart
 8000322:	e7f4      	b.n	800030e <tx_uart>

08000324 <delay_loop>:


delay_loop:
	LDR R9, =0xfffff
 8000324:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8000354 <loop_forever_reset+0x24>

08000328 <delay_inner>:

delay_inner:
	@ notice the SUB has an S on the end, this means it alters the condition register
	@ and can be used to make a branching decision.
	SUBS R9, #1
 8000328:	f1b9 0901 	subs.w	r9, r9, #1
	BGT delay_inner
 800032c:	dcfc      	bgt.n	8000328 <delay_inner>
	BX LR @ return from function call
 800032e:	4770      	bx	lr

08000330 <loop_forever_reset>:

loop_forever_reset:
	LDR R1, =incoming_buffer
 8000330:	4906      	ldr	r1, [pc, #24]	; (800034c <loop_forever_reset+0x1c>)
	MOV R3, #0x00
 8000332:	f04f 0300 	mov.w	r3, #0
	B loop_forever
 8000336:	e7cf      	b.n	80002d8 <loop_forever>
	LDR R0, =RCC
 8000338:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800033c:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 8000340:	48000800 	.word	0x48000800
	LDR R0, =USART1 @ the base address for the register to turn clocks on/off
 8000344:	40013800 	.word	0x40013800
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 8000348:	40004c00 	.word	0x40004c00
	LDR R1, =incoming_buffer
 800034c:	20000000 	.word	0x20000000
	LDR R2, =user_defined_terminating_character
 8000350:	2000003e 	.word	0x2000003e
	LDR R9, =0xfffff
 8000354:	000fffff 	.word	0x000fffff

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff96 	bl	80002ba <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80003a4:	2000005c 	.word	0x2000005c

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	; (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	; (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	; (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	; (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
